datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Project       Project[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ProjectCategory {
  SERVICE
  SOFTWARE
}

enum ProjectType {
  TEAM_MANAGED
  COMPANY_MANAGED
}

enum ProjectTemplate {
  KANBAN
  CUSTOMER_SERVICE
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String?
  column      Column   @relation(fields: [columnId], references: [id])
  columnId    String
  status      Status   @relation(fields: [statusId], references: [id])
  statusId    String
  priority    Priority @default(MEDIUM)
  assignee    String?
  reporter    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Status {
  id        String   @id @default(cuid())
  name      String   @unique
  columns   Column[]
  tickets   Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Column {
  id        String   @id @default(cuid())
  name      String
  status    Status   @relation(fields: [statusId], references: [id])
  statusId  String
  tickets   Ticket[]
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?

  @@unique([name, projectId])
  @@map("columns")
}

model Project {
  id          String      @id @default(cuid())
  name        String
  key         String      @unique
  type        ProjectType
  description String?
  template    ProjectTemplate 
  category    ProjectCategory
  columns     Column[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   User        @relation(fields: [userId], references: [id])
  userId      String
  lead        String?
}
